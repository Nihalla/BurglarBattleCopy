//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Input/InputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputActions : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputActions"",
    ""maps"": [
        {
            ""name"": ""PlayerController"",
            ""id"": ""28a5dd06-4318-44ec-826d-93a5a3066ac6"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""1e6367ee-5863-4fba-8e94-4a4958b20c80"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""92e7401f-b34a-4983-a70c-ce8f37df8bdc"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Crouch"",
                    ""type"": ""Button"",
                    ""id"": ""e37d07a1-f305-4688-9a0c-50496a83643e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""CameraRotation"",
                    ""type"": ""Value"",
                    ""id"": ""3402f9c4-7aa7-4739-9eb3-d0636688eaf4"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""UseTool"",
                    ""type"": ""Button"",
                    ""id"": ""6796216a-d3b2-4672-a4fe-94f4a7f99ed6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Start"",
                    ""type"": ""Button"",
                    ""id"": ""0d9f0645-7065-499e-87d4-5c25b2963e98"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Sprint"",
                    ""type"": ""Button"",
                    ""id"": ""92f015ed-5157-423c-98d5-b125441ef911"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ShareLoot"",
                    ""type"": ""Button"",
                    ""id"": ""46f22ace-7f63-4e1c-b96a-cd2dc3b41056"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Throw"",
                    ""type"": ""Button"",
                    ""id"": ""b73b2d56-5e21-410b-8583-cdab8c608523"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""6943a296-877a-4c10-bfa9-5459d562651b"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": ""StickDeadzone(min=0.075)"",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""WASD"",
                    ""id"": ""d41e66d3-0ca1-41dc-898a-08adcd7b65ad"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""c8cc20b5-25bb-4962-819d-19efbb05556f"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""3f0f7b6b-0bca-4e56-ae41-377a30350c61"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""fa7d45bf-fab5-4b77-8928-aa8b7b7dde00"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""78b94e08-01ae-4cec-802f-7502d47e527b"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""da1af932-46f2-4a79-b161-7192ea65ef58"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e772288d-0202-4359-8177-ac26c5de82ce"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""38f8680a-4bf6-484b-9b01-9121540ab5ae"",
                    ""path"": ""<Gamepad>/rightStickPress"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Crouch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1265ef58-9f6d-4702-96ef-96ac8e7b6ad4"",
                    ""path"": ""<Keyboard>/ctrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""Crouch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e2ce9d20-0357-4a7d-ac0d-a2d634cb8aa9"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": ""StickDeadzone"",
                    ""groups"": ""Gamepad"",
                    ""action"": ""CameraRotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3ac6df55-72ad-4760-acf4-ee9544a9f3e6"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""CameraRotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""166262a3-3153-4100-950c-7578c446a4e7"",
                    ""path"": ""<Gamepad>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""UseTool"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c8427bf9-9c70-4f36-a0d8-8ad1a2a54a2c"",
                    ""path"": ""<Keyboard>/i"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""UseTool"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0ccef815-9b03-4c8d-9244-137e1894d271"",
                    ""path"": ""<Gamepad>/start"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Start"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""07843024-b764-47b4-8e8c-e9f2f2b22f0a"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""Start"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bacadfac-0d2e-4c61-86ff-7baae8786c12"",
                    ""path"": ""<Gamepad>/leftStickPress"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Sprint"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bc2af656-c229-459f-83e9-9cd462e263af"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""Sprint"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6e8a30f3-dccd-47af-ae39-814035def4b9"",
                    ""path"": ""<Gamepad>/dpad/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ShareLoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d82d5bcb-60b3-4cfc-9f65-b7c570c6ca1f"",
                    ""path"": ""<Keyboard>/p"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""ShareLoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e3b97260-53d1-434d-8535-0462b7a487dc"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Throw"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b439a637-6ccc-4446-896d-4592e5dfd78d"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Throw"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""PlayerInteraction"",
            ""id"": ""e2356dde-185f-410a-a6ff-667f1ce0b8c9"",
            ""actions"": [
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""29fe7056-82b0-4e4e-b2ff-a3c5516f3bb4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""1906742e-bad5-416a-9d1c-e2763f537fe8"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c58a1b55-e595-44e2-97a6-7a389f2657b4"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""VaultPuzzle"",
            ""id"": ""dfb7e979-87ec-4e43-b450-0b6f9c01c24d"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""6f3a6bae-4615-4bfe-9b2c-14a2f8e852ac"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""SelectUp"",
                    ""type"": ""Button"",
                    ""id"": ""a560b431-ea23-42a0-8fa8-97ce33590230"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Exit"",
                    ""type"": ""Button"",
                    ""id"": ""387cb7b3-f64b-4557-8ee6-b08f95c9c32b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SelectDown"",
                    ""type"": ""Button"",
                    ""id"": ""2eb5874b-630b-41c0-9751-ebbaf429a70c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""5ef52c30-21be-4e76-beee-f67a619945f2"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": ""StickDeadzone"",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5db791de-cefd-4fc5-80ac-dc985a26ae7f"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Exit"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fca0fde8-e01d-41be-871e-eaaf1d136e69"",
                    ""path"": ""<Gamepad>/dpad/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SelectDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3e5a9c2e-2fe7-4c43-bb7b-d02e5da72236"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SelectDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""02399ac3-6f3c-4ac7-94fe-da031836a003"",
                    ""path"": ""<Gamepad>/dpad/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SelectUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""99c3c428-192f-48e0-8769-060aac4a75b9"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SelectUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""WASD"",
                    ""id"": ""4879aeb7-251c-40f9-92e9-3c38485adb26"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""1033e63d-6c27-41c5-b13d-b568cd403164"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""6a805f1c-b26e-4f64-b9d0-d0ab07f0e2ec"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""cf960133-af06-467b-b30c-004c49a06d0d"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""481cb48c-9d3a-4edc-9010-8592b5279d3d"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""PlayerLockpick"",
            ""id"": ""64de2587-1351-4e5d-8cb9-64873707d0b0"",
            ""actions"": [
                {
                    ""name"": ""MoveInnerLock"",
                    ""type"": ""Value"",
                    ""id"": ""a9f26d09-c2c8-4364-b898-6278f280f479"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""MoveOuterLock"",
                    ""type"": ""Value"",
                    ""id"": ""28b3d1f8-2c3d-489e-b7b8-f3a224ef67b5"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""90545017-2c92-4f94-a9b3-bece1d0c2a14"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveInnerLock"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8202f2f1-f4aa-48da-8aee-4796dc100599"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveOuterLock"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""MenuUI"",
            ""id"": ""1eb1eb16-6db2-4243-8247-9350952228ae"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""90e6d03e-65b0-482a-b14a-daa15acc5146"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Select"",
                    ""type"": ""Button"",
                    ""id"": ""cd053dea-7c03-4f14-9f61-b46030072204"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Cancel"",
                    ""type"": ""Button"",
                    ""id"": ""eb7e0558-11b2-4a93-99f8-2db88a87547f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Start"",
                    ""type"": ""Button"",
                    ""id"": ""4d12435f-2b55-4ed0-b84d-1fa433262141"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Pause"",
                    ""type"": ""Button"",
                    ""id"": ""961a57f7-5996-48ed-b73e-38f1a1309dab"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Back"",
                    ""type"": ""Button"",
                    ""id"": ""0ede35f4-e7bc-414b-892e-3c3f18a055af"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""cff9d752-66f4-44e8-aa48-c6fe73a08916"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""f4ca379b-5add-45a7-b147-43236f36d881"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""1841da55-3f12-4fac-86c0-fcafac8aa1f2"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""a6495960-16e5-4a44-9ea0-faf74ec1736e"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""821c6514-33f8-440a-9e69-9b0c4f47829a"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""D-Pad"",
                    ""id"": ""3f16ccf7-6167-47fe-b221-c94864b7aad3"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""0e0bae37-4bf7-4078-b7a6-b7b9211608cd"",
                    ""path"": ""<Gamepad>/dpad/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""c9f539e6-bc93-432c-9003-6853928adb23"",
                    ""path"": ""<Gamepad>/dpad/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""9b7def1d-de5d-4097-8dba-61ba65157b0c"",
                    ""path"": ""<Gamepad>/dpad/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""ef66e42d-c89b-426d-a15a-df3542be4ea3"",
                    ""path"": ""<Gamepad>/dpad/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""09ba31c7-03e9-4e91-8570-1cf0d8c16cb0"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4c2ccac5-0596-4839-a78b-176a3a1786de"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Select"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9079f1f7-e7e2-4270-a395-f7ed098fe1aa"",
                    ""path"": ""<Keyboard>/enter"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""Select"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2b8d1d95-b42d-44af-bada-c037a2151960"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Cancel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c40f0978-cf19-4967-9cb9-6b13b9da670e"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""Cancel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6d8f54d2-38a7-4158-8abe-b42e6bbeed67"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Start"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2e54853a-511f-440e-8c30-8715eac7654d"",
                    ""path"": ""<Gamepad>/start"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Start"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a6720521-31e1-4138-82f7-330f0d97fbea"",
                    ""path"": ""<Gamepad>/start"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2d724849-69fa-459f-a7f8-84f5029dd8fc"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Back"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Gamepad"",
            ""bindingGroup"": ""Gamepad"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Keyboard and Mouse"",
            ""bindingGroup"": ""Keyboard and Mouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // PlayerController
        m_PlayerController = asset.FindActionMap("PlayerController", throwIfNotFound: true);
        m_PlayerController_Move = m_PlayerController.FindAction("Move", throwIfNotFound: true);
        m_PlayerController_Jump = m_PlayerController.FindAction("Jump", throwIfNotFound: true);
        m_PlayerController_Crouch = m_PlayerController.FindAction("Crouch", throwIfNotFound: true);
        m_PlayerController_CameraRotation = m_PlayerController.FindAction("CameraRotation", throwIfNotFound: true);
        m_PlayerController_UseTool = m_PlayerController.FindAction("UseTool", throwIfNotFound: true);
        m_PlayerController_Start = m_PlayerController.FindAction("Start", throwIfNotFound: true);
        m_PlayerController_Sprint = m_PlayerController.FindAction("Sprint", throwIfNotFound: true);
        m_PlayerController_ShareLoot = m_PlayerController.FindAction("ShareLoot", throwIfNotFound: true);
        m_PlayerController_Throw = m_PlayerController.FindAction("Throw", throwIfNotFound: true);
        // PlayerInteraction
        m_PlayerInteraction = asset.FindActionMap("PlayerInteraction", throwIfNotFound: true);
        m_PlayerInteraction_Interact = m_PlayerInteraction.FindAction("Interact", throwIfNotFound: true);
        // VaultPuzzle
        m_VaultPuzzle = asset.FindActionMap("VaultPuzzle", throwIfNotFound: true);
        m_VaultPuzzle_Move = m_VaultPuzzle.FindAction("Move", throwIfNotFound: true);
        m_VaultPuzzle_SelectUp = m_VaultPuzzle.FindAction("SelectUp", throwIfNotFound: true);
        m_VaultPuzzle_Exit = m_VaultPuzzle.FindAction("Exit", throwIfNotFound: true);
        m_VaultPuzzle_SelectDown = m_VaultPuzzle.FindAction("SelectDown", throwIfNotFound: true);
        // PlayerLockpick
        m_PlayerLockpick = asset.FindActionMap("PlayerLockpick", throwIfNotFound: true);
        m_PlayerLockpick_MoveInnerLock = m_PlayerLockpick.FindAction("MoveInnerLock", throwIfNotFound: true);
        m_PlayerLockpick_MoveOuterLock = m_PlayerLockpick.FindAction("MoveOuterLock", throwIfNotFound: true);
        // MenuUI
        m_MenuUI = asset.FindActionMap("MenuUI", throwIfNotFound: true);
        m_MenuUI_Move = m_MenuUI.FindAction("Move", throwIfNotFound: true);
        m_MenuUI_Select = m_MenuUI.FindAction("Select", throwIfNotFound: true);
        m_MenuUI_Cancel = m_MenuUI.FindAction("Cancel", throwIfNotFound: true);
        m_MenuUI_Start = m_MenuUI.FindAction("Start", throwIfNotFound: true);
        m_MenuUI_Pause = m_MenuUI.FindAction("Pause", throwIfNotFound: true);
        m_MenuUI_Back = m_MenuUI.FindAction("Back", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PlayerController
    private readonly InputActionMap m_PlayerController;
    private IPlayerControllerActions m_PlayerControllerActionsCallbackInterface;
    private readonly InputAction m_PlayerController_Move;
    private readonly InputAction m_PlayerController_Jump;
    private readonly InputAction m_PlayerController_Crouch;
    private readonly InputAction m_PlayerController_CameraRotation;
    private readonly InputAction m_PlayerController_UseTool;
    private readonly InputAction m_PlayerController_Start;
    private readonly InputAction m_PlayerController_Sprint;
    private readonly InputAction m_PlayerController_ShareLoot;
    private readonly InputAction m_PlayerController_Throw;
    public struct PlayerControllerActions
    {
        private @InputActions m_Wrapper;
        public PlayerControllerActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_PlayerController_Move;
        public InputAction @Jump => m_Wrapper.m_PlayerController_Jump;
        public InputAction @Crouch => m_Wrapper.m_PlayerController_Crouch;
        public InputAction @CameraRotation => m_Wrapper.m_PlayerController_CameraRotation;
        public InputAction @UseTool => m_Wrapper.m_PlayerController_UseTool;
        public InputAction @Start => m_Wrapper.m_PlayerController_Start;
        public InputAction @Sprint => m_Wrapper.m_PlayerController_Sprint;
        public InputAction @ShareLoot => m_Wrapper.m_PlayerController_ShareLoot;
        public InputAction @Throw => m_Wrapper.m_PlayerController_Throw;
        public InputActionMap Get() { return m_Wrapper.m_PlayerController; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerControllerActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerControllerActions instance)
        {
            if (m_Wrapper.m_PlayerControllerActionsCallbackInterface != null)
            {
                @Move.started -= m_Wrapper.m_PlayerControllerActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_PlayerControllerActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_PlayerControllerActionsCallbackInterface.OnMove;
                @Jump.started -= m_Wrapper.m_PlayerControllerActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_PlayerControllerActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_PlayerControllerActionsCallbackInterface.OnJump;
                @Crouch.started -= m_Wrapper.m_PlayerControllerActionsCallbackInterface.OnCrouch;
                @Crouch.performed -= m_Wrapper.m_PlayerControllerActionsCallbackInterface.OnCrouch;
                @Crouch.canceled -= m_Wrapper.m_PlayerControllerActionsCallbackInterface.OnCrouch;
                @CameraRotation.started -= m_Wrapper.m_PlayerControllerActionsCallbackInterface.OnCameraRotation;
                @CameraRotation.performed -= m_Wrapper.m_PlayerControllerActionsCallbackInterface.OnCameraRotation;
                @CameraRotation.canceled -= m_Wrapper.m_PlayerControllerActionsCallbackInterface.OnCameraRotation;
                @UseTool.started -= m_Wrapper.m_PlayerControllerActionsCallbackInterface.OnUseTool;
                @UseTool.performed -= m_Wrapper.m_PlayerControllerActionsCallbackInterface.OnUseTool;
                @UseTool.canceled -= m_Wrapper.m_PlayerControllerActionsCallbackInterface.OnUseTool;
                @Start.started -= m_Wrapper.m_PlayerControllerActionsCallbackInterface.OnStart;
                @Start.performed -= m_Wrapper.m_PlayerControllerActionsCallbackInterface.OnStart;
                @Start.canceled -= m_Wrapper.m_PlayerControllerActionsCallbackInterface.OnStart;
                @Sprint.started -= m_Wrapper.m_PlayerControllerActionsCallbackInterface.OnSprint;
                @Sprint.performed -= m_Wrapper.m_PlayerControllerActionsCallbackInterface.OnSprint;
                @Sprint.canceled -= m_Wrapper.m_PlayerControllerActionsCallbackInterface.OnSprint;
                @ShareLoot.started -= m_Wrapper.m_PlayerControllerActionsCallbackInterface.OnShareLoot;
                @ShareLoot.performed -= m_Wrapper.m_PlayerControllerActionsCallbackInterface.OnShareLoot;
                @ShareLoot.canceled -= m_Wrapper.m_PlayerControllerActionsCallbackInterface.OnShareLoot;
                @Throw.started -= m_Wrapper.m_PlayerControllerActionsCallbackInterface.OnThrow;
                @Throw.performed -= m_Wrapper.m_PlayerControllerActionsCallbackInterface.OnThrow;
                @Throw.canceled -= m_Wrapper.m_PlayerControllerActionsCallbackInterface.OnThrow;
            }
            m_Wrapper.m_PlayerControllerActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
                @Crouch.started += instance.OnCrouch;
                @Crouch.performed += instance.OnCrouch;
                @Crouch.canceled += instance.OnCrouch;
                @CameraRotation.started += instance.OnCameraRotation;
                @CameraRotation.performed += instance.OnCameraRotation;
                @CameraRotation.canceled += instance.OnCameraRotation;
                @UseTool.started += instance.OnUseTool;
                @UseTool.performed += instance.OnUseTool;
                @UseTool.canceled += instance.OnUseTool;
                @Start.started += instance.OnStart;
                @Start.performed += instance.OnStart;
                @Start.canceled += instance.OnStart;
                @Sprint.started += instance.OnSprint;
                @Sprint.performed += instance.OnSprint;
                @Sprint.canceled += instance.OnSprint;
                @ShareLoot.started += instance.OnShareLoot;
                @ShareLoot.performed += instance.OnShareLoot;
                @ShareLoot.canceled += instance.OnShareLoot;
                @Throw.started += instance.OnThrow;
                @Throw.performed += instance.OnThrow;
                @Throw.canceled += instance.OnThrow;
            }
        }
    }
    public PlayerControllerActions @PlayerController => new PlayerControllerActions(this);

    // PlayerInteraction
    private readonly InputActionMap m_PlayerInteraction;
    private IPlayerInteractionActions m_PlayerInteractionActionsCallbackInterface;
    private readonly InputAction m_PlayerInteraction_Interact;
    public struct PlayerInteractionActions
    {
        private @InputActions m_Wrapper;
        public PlayerInteractionActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Interact => m_Wrapper.m_PlayerInteraction_Interact;
        public InputActionMap Get() { return m_Wrapper.m_PlayerInteraction; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerInteractionActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerInteractionActions instance)
        {
            if (m_Wrapper.m_PlayerInteractionActionsCallbackInterface != null)
            {
                @Interact.started -= m_Wrapper.m_PlayerInteractionActionsCallbackInterface.OnInteract;
                @Interact.performed -= m_Wrapper.m_PlayerInteractionActionsCallbackInterface.OnInteract;
                @Interact.canceled -= m_Wrapper.m_PlayerInteractionActionsCallbackInterface.OnInteract;
            }
            m_Wrapper.m_PlayerInteractionActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Interact.started += instance.OnInteract;
                @Interact.performed += instance.OnInteract;
                @Interact.canceled += instance.OnInteract;
            }
        }
    }
    public PlayerInteractionActions @PlayerInteraction => new PlayerInteractionActions(this);

    // VaultPuzzle
    private readonly InputActionMap m_VaultPuzzle;
    private IVaultPuzzleActions m_VaultPuzzleActionsCallbackInterface;
    private readonly InputAction m_VaultPuzzle_Move;
    private readonly InputAction m_VaultPuzzle_SelectUp;
    private readonly InputAction m_VaultPuzzle_Exit;
    private readonly InputAction m_VaultPuzzle_SelectDown;
    public struct VaultPuzzleActions
    {
        private @InputActions m_Wrapper;
        public VaultPuzzleActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_VaultPuzzle_Move;
        public InputAction @SelectUp => m_Wrapper.m_VaultPuzzle_SelectUp;
        public InputAction @Exit => m_Wrapper.m_VaultPuzzle_Exit;
        public InputAction @SelectDown => m_Wrapper.m_VaultPuzzle_SelectDown;
        public InputActionMap Get() { return m_Wrapper.m_VaultPuzzle; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(VaultPuzzleActions set) { return set.Get(); }
        public void SetCallbacks(IVaultPuzzleActions instance)
        {
            if (m_Wrapper.m_VaultPuzzleActionsCallbackInterface != null)
            {
                @Move.started -= m_Wrapper.m_VaultPuzzleActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_VaultPuzzleActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_VaultPuzzleActionsCallbackInterface.OnMove;
                @SelectUp.started -= m_Wrapper.m_VaultPuzzleActionsCallbackInterface.OnSelectUp;
                @SelectUp.performed -= m_Wrapper.m_VaultPuzzleActionsCallbackInterface.OnSelectUp;
                @SelectUp.canceled -= m_Wrapper.m_VaultPuzzleActionsCallbackInterface.OnSelectUp;
                @Exit.started -= m_Wrapper.m_VaultPuzzleActionsCallbackInterface.OnExit;
                @Exit.performed -= m_Wrapper.m_VaultPuzzleActionsCallbackInterface.OnExit;
                @Exit.canceled -= m_Wrapper.m_VaultPuzzleActionsCallbackInterface.OnExit;
                @SelectDown.started -= m_Wrapper.m_VaultPuzzleActionsCallbackInterface.OnSelectDown;
                @SelectDown.performed -= m_Wrapper.m_VaultPuzzleActionsCallbackInterface.OnSelectDown;
                @SelectDown.canceled -= m_Wrapper.m_VaultPuzzleActionsCallbackInterface.OnSelectDown;
            }
            m_Wrapper.m_VaultPuzzleActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @SelectUp.started += instance.OnSelectUp;
                @SelectUp.performed += instance.OnSelectUp;
                @SelectUp.canceled += instance.OnSelectUp;
                @Exit.started += instance.OnExit;
                @Exit.performed += instance.OnExit;
                @Exit.canceled += instance.OnExit;
                @SelectDown.started += instance.OnSelectDown;
                @SelectDown.performed += instance.OnSelectDown;
                @SelectDown.canceled += instance.OnSelectDown;
            }
        }
    }
    public VaultPuzzleActions @VaultPuzzle => new VaultPuzzleActions(this);

    // PlayerLockpick
    private readonly InputActionMap m_PlayerLockpick;
    private IPlayerLockpickActions m_PlayerLockpickActionsCallbackInterface;
    private readonly InputAction m_PlayerLockpick_MoveInnerLock;
    private readonly InputAction m_PlayerLockpick_MoveOuterLock;
    public struct PlayerLockpickActions
    {
        private @InputActions m_Wrapper;
        public PlayerLockpickActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @MoveInnerLock => m_Wrapper.m_PlayerLockpick_MoveInnerLock;
        public InputAction @MoveOuterLock => m_Wrapper.m_PlayerLockpick_MoveOuterLock;
        public InputActionMap Get() { return m_Wrapper.m_PlayerLockpick; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerLockpickActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerLockpickActions instance)
        {
            if (m_Wrapper.m_PlayerLockpickActionsCallbackInterface != null)
            {
                @MoveInnerLock.started -= m_Wrapper.m_PlayerLockpickActionsCallbackInterface.OnMoveInnerLock;
                @MoveInnerLock.performed -= m_Wrapper.m_PlayerLockpickActionsCallbackInterface.OnMoveInnerLock;
                @MoveInnerLock.canceled -= m_Wrapper.m_PlayerLockpickActionsCallbackInterface.OnMoveInnerLock;
                @MoveOuterLock.started -= m_Wrapper.m_PlayerLockpickActionsCallbackInterface.OnMoveOuterLock;
                @MoveOuterLock.performed -= m_Wrapper.m_PlayerLockpickActionsCallbackInterface.OnMoveOuterLock;
                @MoveOuterLock.canceled -= m_Wrapper.m_PlayerLockpickActionsCallbackInterface.OnMoveOuterLock;
            }
            m_Wrapper.m_PlayerLockpickActionsCallbackInterface = instance;
            if (instance != null)
            {
                @MoveInnerLock.started += instance.OnMoveInnerLock;
                @MoveInnerLock.performed += instance.OnMoveInnerLock;
                @MoveInnerLock.canceled += instance.OnMoveInnerLock;
                @MoveOuterLock.started += instance.OnMoveOuterLock;
                @MoveOuterLock.performed += instance.OnMoveOuterLock;
                @MoveOuterLock.canceled += instance.OnMoveOuterLock;
            }
        }
    }
    public PlayerLockpickActions @PlayerLockpick => new PlayerLockpickActions(this);

    // MenuUI
    private readonly InputActionMap m_MenuUI;
    private IMenuUIActions m_MenuUIActionsCallbackInterface;
    private readonly InputAction m_MenuUI_Move;
    private readonly InputAction m_MenuUI_Select;
    private readonly InputAction m_MenuUI_Cancel;
    private readonly InputAction m_MenuUI_Start;
    private readonly InputAction m_MenuUI_Pause;
    private readonly InputAction m_MenuUI_Back;
    public struct MenuUIActions
    {
        private @InputActions m_Wrapper;
        public MenuUIActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_MenuUI_Move;
        public InputAction @Select => m_Wrapper.m_MenuUI_Select;
        public InputAction @Cancel => m_Wrapper.m_MenuUI_Cancel;
        public InputAction @Start => m_Wrapper.m_MenuUI_Start;
        public InputAction @Pause => m_Wrapper.m_MenuUI_Pause;
        public InputAction @Back => m_Wrapper.m_MenuUI_Back;
        public InputActionMap Get() { return m_Wrapper.m_MenuUI; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MenuUIActions set) { return set.Get(); }
        public void SetCallbacks(IMenuUIActions instance)
        {
            if (m_Wrapper.m_MenuUIActionsCallbackInterface != null)
            {
                @Move.started -= m_Wrapper.m_MenuUIActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_MenuUIActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_MenuUIActionsCallbackInterface.OnMove;
                @Select.started -= m_Wrapper.m_MenuUIActionsCallbackInterface.OnSelect;
                @Select.performed -= m_Wrapper.m_MenuUIActionsCallbackInterface.OnSelect;
                @Select.canceled -= m_Wrapper.m_MenuUIActionsCallbackInterface.OnSelect;
                @Cancel.started -= m_Wrapper.m_MenuUIActionsCallbackInterface.OnCancel;
                @Cancel.performed -= m_Wrapper.m_MenuUIActionsCallbackInterface.OnCancel;
                @Cancel.canceled -= m_Wrapper.m_MenuUIActionsCallbackInterface.OnCancel;
                @Start.started -= m_Wrapper.m_MenuUIActionsCallbackInterface.OnStart;
                @Start.performed -= m_Wrapper.m_MenuUIActionsCallbackInterface.OnStart;
                @Start.canceled -= m_Wrapper.m_MenuUIActionsCallbackInterface.OnStart;
                @Pause.started -= m_Wrapper.m_MenuUIActionsCallbackInterface.OnPause;
                @Pause.performed -= m_Wrapper.m_MenuUIActionsCallbackInterface.OnPause;
                @Pause.canceled -= m_Wrapper.m_MenuUIActionsCallbackInterface.OnPause;
                @Back.started -= m_Wrapper.m_MenuUIActionsCallbackInterface.OnBack;
                @Back.performed -= m_Wrapper.m_MenuUIActionsCallbackInterface.OnBack;
                @Back.canceled -= m_Wrapper.m_MenuUIActionsCallbackInterface.OnBack;
            }
            m_Wrapper.m_MenuUIActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @Select.started += instance.OnSelect;
                @Select.performed += instance.OnSelect;
                @Select.canceled += instance.OnSelect;
                @Cancel.started += instance.OnCancel;
                @Cancel.performed += instance.OnCancel;
                @Cancel.canceled += instance.OnCancel;
                @Start.started += instance.OnStart;
                @Start.performed += instance.OnStart;
                @Start.canceled += instance.OnStart;
                @Pause.started += instance.OnPause;
                @Pause.performed += instance.OnPause;
                @Pause.canceled += instance.OnPause;
                @Back.started += instance.OnBack;
                @Back.performed += instance.OnBack;
                @Back.canceled += instance.OnBack;
            }
        }
    }
    public MenuUIActions @MenuUI => new MenuUIActions(this);
    private int m_GamepadSchemeIndex = -1;
    public InputControlScheme GamepadScheme
    {
        get
        {
            if (m_GamepadSchemeIndex == -1) m_GamepadSchemeIndex = asset.FindControlSchemeIndex("Gamepad");
            return asset.controlSchemes[m_GamepadSchemeIndex];
        }
    }
    private int m_KeyboardandMouseSchemeIndex = -1;
    public InputControlScheme KeyboardandMouseScheme
    {
        get
        {
            if (m_KeyboardandMouseSchemeIndex == -1) m_KeyboardandMouseSchemeIndex = asset.FindControlSchemeIndex("Keyboard and Mouse");
            return asset.controlSchemes[m_KeyboardandMouseSchemeIndex];
        }
    }
    public interface IPlayerControllerActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnCrouch(InputAction.CallbackContext context);
        void OnCameraRotation(InputAction.CallbackContext context);
        void OnUseTool(InputAction.CallbackContext context);
        void OnStart(InputAction.CallbackContext context);
        void OnSprint(InputAction.CallbackContext context);
        void OnShareLoot(InputAction.CallbackContext context);
        void OnThrow(InputAction.CallbackContext context);
    }
    public interface IPlayerInteractionActions
    {
        void OnInteract(InputAction.CallbackContext context);
    }
    public interface IVaultPuzzleActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnSelectUp(InputAction.CallbackContext context);
        void OnExit(InputAction.CallbackContext context);
        void OnSelectDown(InputAction.CallbackContext context);
    }
    public interface IPlayerLockpickActions
    {
        void OnMoveInnerLock(InputAction.CallbackContext context);
        void OnMoveOuterLock(InputAction.CallbackContext context);
    }
    public interface IMenuUIActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnSelect(InputAction.CallbackContext context);
        void OnCancel(InputAction.CallbackContext context);
        void OnStart(InputAction.CallbackContext context);
        void OnPause(InputAction.CallbackContext context);
        void OnBack(InputAction.CallbackContext context);
    }
}
